plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'org.web3j' version '4.1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'org.unbroken-dome.test-sets' version '2.1.1'
    id 'com.diffplug.gradle.spotless' version '3.23.0'
    id 'com.adarshr.test-logger' version '1.6.0'
}

group = 'org.web3j'
version = '1.0.0-SNAPSHOT'

//apply from: 'maven.gradle'

ext {
    loadPropsFromFile = { String path ->
        def props = new Properties()
        def propsFile = file(path)
        if (propsFile.exists()) {
            propsFile.withReader { reader ->
                props.load(reader)
            }
        }
        props
    }
    versions = loadPropsFromFile("$rootDir/versions.properties")
}

repositories {
    mavenCentral()
    flatDir {
        dirs "$projectDir/lib"
    }
}

testSets {
    integrationTest {
        dirName = 'integration-test'
    }
}

dependencies {
    implementation name: 'org-aion-avm-api'
    implementation name: 'org-aion-avm-userlib'
    implementation name: 'org-aion-avm-tooling'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-noarg'
    implementation 'org.jetbrains.kotlin:kotlin-native-utils'

    implementation "io.github.microutils:kotlin-logging:${versions.kLogging}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}"

    implementation("com.github.shyiko:ktlint:${versions.ktlint}") {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.slf4j'
    }

    implementation "org.web3j:core:${versions.web3j}"

    testImplementation(group: 'org.web3j', name: 'core', version: versions.web3j, classifier: 'tests')

    testImplementation "net.i2p.crypto:eddsa:${versions.eddsa}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit5}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testImplementation "junit:junit:${versions.junit4}"
    testImplementation("io.mockk:mockk:${versions.mockk}") {
        exclude group: 'org.jetbrains.kotlin'
    }

    runtimeOnly "com.github.schnitker.logmanager:logmgr-logback:${versions.logmanager}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit5}"

    integrationTestImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
    integrationTestImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
}

spotless {
    kotlin {
        // This path needs to be relative to each project
        target fileTree('.') {
            include '**/*.kt'
            exclude '**/.gradle/**'
        }
        ktlint(versions.ktlint)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    reports.html.enabled = false
    reports.junitXml.enabled = false
    systemProperties = [
            'junit.jupiter.extensions.autodetection.enabled': 'true',
            'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
    ]
}

testlogger {
    showStandardStreams true
}

sourceCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dependsOn 'generateContractWrappers'
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dependsOn 'generateTestContractWrappers'
}

compileIntegrationTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dependsOn 'generateIntegrationTestContractWrappers'
}

sourceSets {
    main.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/main/java"
    test.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/test/java"
    integrationTest.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/integrationTest/java"
}
