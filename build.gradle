buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.web3j:web3j-gradle-plugin:4.3.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.40'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'
        classpath 'com.adarshr:gradle-test-logger-plugin:1.7.0'
    }
}

group = 'org.web3j'
version = '0.1.0-SNAPSHOT'
description = 'Integrates web3j with the Aion Network blockchain.'

ext {
    loadPropsFromFile = { String path ->
        def props = new Properties()
        def propsFile = file(path)
        if (propsFile.exists()) {
            propsFile.withReader { reader ->
                props.load(reader)
            }
        }
        props
    }
    versions = loadPropsFromFile("$rootDir/versions.properties")
    ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
    ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
    ossrhRepoUrl = project.hasProperty('ossrhRepoUrl') ? project.property('ossrhRepoUrl') : System.getenv('OSSRH_REPO_URL')
    bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    bintrayGpgPassphrase = project.hasProperty('bintrayGpgPassphrase') ? project.property('bintrayGpgPassphrase') : System.getenv('BINTRAY_GPG_PASSPHRASE')
    manualRelease = project.hasProperty('manualRelease') ? project.property('manualRelease').toBoolean() : false
    isSnapshotVersion = project.version.endsWith("-SNAPSHOT")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.web3j'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.adarshr.test-logger'

    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
            mavenContent {
                snapshotsOnly()
            }
        }
        maven {
            url "$rootProject.projectDir/lib"
        }
    }

    testSets {
        integrationTest {
            dirName = 'integration-test'
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperties = [
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ]
    }

    configurations {
        testOutput.extendsFrom (testCompile)
        integrationTestOutput.extendsFrom (integrationTestCompile)
    }

    artifacts {
        testOutput testJar
        integrationTestOutput integrationTestJar
    }
    
    testlogger {
        showStandardStreams true
    }

    dependencies {
        api "org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}"
        
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-noarg'
        implementation 'org.jetbrains.kotlin:kotlin-native-utils'

        implementation "io.github.microutils:kotlin-logging:${versions.kLogging}"

        implementation("com.github.shyiko:ktlint:${versions.ktlint}") {
            exclude group: 'org.jetbrains.kotlin'
            exclude group: 'org.slf4j'
        }
        
        testImplementation(group: 'org.web3j', name: 'core', version: versions.web3j, classifier: 'tests')
        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit5}"
        testImplementation "com.willowtreeapps.assertk:assertk-jvm:${versions.assertk}"
        testImplementation "junit:junit:${versions.junit4}"
        testImplementation("io.mockk:mockk:${versions.mockk}") {
            exclude group: 'org.jetbrains.kotlin'
        }

        runtimeOnly "com.github.schnitker.logmanager:logmgr-logback:${versions.logmanager}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit5}"

        integrationTestImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
        integrationTestImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dependsOn 'generateContractWrappers'
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dependsOn 'generateTestContractWrappers'
    }

    compileIntegrationTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dependsOn 'generateIntegrationTestContractWrappers'
    }

    sourceSets {
        main.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/main/java"
        test.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/test/java"
        integrationTest.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/integrationTest/java"
    }

    spotless {
        kotlin {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/*.kt'
                exclude '**/.gradle/**'
            }
            ktlint(versions.ktlint)
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = rootProject.group
                artifactId = project.name
                version = rootProject.version

                from components.kotlin

                artifact sourcesJar {
                    classifier 'sources'
                }

                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/web3j/web3j-aion"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = 'xaviarias'
                            name = 'Xavier Arias'
                            email = 'xavier@web3labs.com'
                            organization = 'Web3 Labs'
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/web3j/web3j-aion.git"
                        developerConnection = "scm:git://github.com/web3j/web3j-aion.git"
                        url = "https://github.com/web3j/web3j-aion.git"
                    }
                }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                // beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                
                onlyIf {
                    // Only run if this is a manual release triggered by a user, or an automated release for snapshots.
                    // We don't need to run this for automated releases.
                    isSnapshotVersion && ossrhUsername != '' && ossrhPassword != '' && ossrhRepoUrl != ''
                }

                repository(url: ossrhRepoUrl) {
                    authentication(
                            userName: ossrhUsername,
                            password: ossrhPassword
                    )
                }

                pom.project {
                    name 'web3j-aion'
                    packaging 'jar'
                    description project.description
                    url 'https://web3j.io'

                    scm {
                        connection 'scm:git:https://github.com/web3j/web3j-aion.git'
                        url 'https://github.com/web3j/web3j-aion.git'
                        developerConnection 'scm:git://github.com/web3j/web3j-aion.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'xaviarias'
                            name = 'Xavier Arias'
                            email = 'xavier@web3labs.com'
                            organization = 'Web3 Labs'
                        }
                    }
                }
            }
        }
    }
    
    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['maven']
        publish = true
        pkg {
            repo = 'maven'
            name = project.name
            desc = project.description
            userOrg = 'web3j'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://github.com/web3j/web3j-aion/issues'
            vcsUrl = 'https://github.com/web3j/web3j-aion.git'
            websiteUrl = 'https://web3j.io'
            publicDownloadNumbers = true

            version {
                gpg {
                    sign = true
                    passphrase = bintrayGpgPassphrase
                }
                mavenCentralSync {
                    sync = true
                    user = ossrhUsername
                    password = ossrhPassword
                    close = '1'
                }
            }
        }
    }

    task releaseSnapshot(group: 'publishing') {
        dependsOn 'build'
        dependsOn 'uploadArchives'

        doLast {
            // Validates the user inputs before a release can be performed.
            if (isSnapshotVersion) {
                // Only need OSSRH details.
                logger.lifecycle("About to perform {} snapshot release ...", manualRelease ? "a manual" : "an automated")

                if (!ossrhUsername || !ossrhPassword || !ossrhRepoUrl) {
                    throw new InvalidUserDataException("Required parameters missing:  'ossrhUsername', 'ossrhPassword', 'ossrhRepoUrl'")
                }

                logger.lifecycle(" - ossrhUsername={}", ossrhUsername)
                logger.lifecycle(" - ossrhPassword={}", ossrhPassword ? "provided" : "not_provided")
                logger.lifecycle(" - ossrhRepoUrl={}", ossrhRepoUrl)
            } else {
                // Release => Need OSSRH and bintray.
                if (!ossrhUsername || !ossrhPassword || !ossrhRepoUrl) {
                    throw new InvalidUserDataException("Required parameters missing:  'ossrhUsername', 'ossrhPassword', 'ossrhRepoUrl'")
                }
                if (!bintrayUser || !bintrayKey || !bintrayGpgPassphrase) {
                    throw new InvalidUserDataException("Required parameters missing:  'bintrayUser', 'bintrayKey', 'bintrayGpgPassphrase'")
                }
                logger.lifecycle("About to perform {} full release ...", manualRelease ? "a manual" : "an automated")
                logger.lifecycle(" - ossrhUsername={}", ossrhUsername)
                logger.lifecycle(" - ossrhPassword={}", ossrhPassword ? "provided" : "not_provided")
                logger.lifecycle(" - ossrhRepoUrl={}", ossrhRepoUrl)
                logger.lifecycle(" - bintrayUser={}", bintrayUser)
                logger.lifecycle(" - bintrayKey={}", bintrayKey ? "provided" : "not_provided")
                logger.lifecycle(" - bintrayGpgPassphrase={}", bintrayGpgPassphrase ? "provided" : "not_provided")
            }
        }

        // Snapshots go to nexus, non-snapshots go to bintray.
        if (isSnapshotVersion) {
            dependsOn 'uploadArchives'
            tasks.findByName('uploadArchives').mustRunAfter 'build'
        } else {
            dependsOn 'bintrayUpload'
            tasks.findByName('bintrayUpload').mustRunAfter 'build'
        }
    }
}
