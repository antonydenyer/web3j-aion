buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.web3j:web3j-gradle-plugin:4.3.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'
        classpath 'com.adarshr:gradle-test-logger-plugin:1.7.0'
    }
}

group = 'org.web3j.aion'
version = '1.0.0-SNAPSHOT'

//apply from: 'maven.gradle'

ext {
    loadPropsFromFile = { String path ->
        def props = new Properties()
        def propsFile = file(path)
        if (propsFile.exists()) {
            propsFile.withReader { reader ->
                props.load(reader)
            }
        }
        props
    }
    versions = loadPropsFromFile("$rootDir/versions.properties")
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.web3j'
    apply plugin: 'maven-publish'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.adarshr.test-logger'

    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
            mavenContent {
                snapshotsOnly()
            }
        }
        flatDir {
            dirs "$rootProject.projectDir/lib"
        }
    }

    testSets {
        integrationTest {
            dirName = 'integration-test'
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        reports.html.enabled = false
        reports.junitXml.enabled = false
        systemProperties = [
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ]
    }

    configurations {
        testOutput.extendsFrom (testCompile)
        integrationTestOutput.extendsFrom (integrationTestCompile)
    }

    artifacts {
        testOutput testJar
        integrationTestOutput integrationTestJar
    }
    
    testlogger {
        showStandardStreams true
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        
        testImplementation(group: 'org.web3j', name: 'core', version: versions.web3j, classifier: 'tests')
        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit5}"
        testImplementation "com.willowtreeapps.assertk:assertk-jvm:${versions.assertk}"
        testImplementation "junit:junit:${versions.junit4}"
        testImplementation("io.mockk:mockk:${versions.mockk}") {
            exclude group: 'org.jetbrains.kotlin'
        }

        runtimeOnly "com.github.schnitker.logmanager:logmgr-logback:${versions.logmanager}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit5}"

        integrationTestImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
        integrationTestImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dependsOn 'generateContractWrappers'
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dependsOn 'generateTestContractWrappers'
    }

    compileIntegrationTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dependsOn 'generateIntegrationTestContractWrappers'
    }

    sourceSets {
        main.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/main/java"
        test.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/test/java"
        integrationTest.kotlin.srcDirs += "${web3j.generatedFilesBaseDir}/integrationTest/java"
    }

    spotless {
        kotlin {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/*.kt'
                exclude '**/.gradle/**'
            }
            ktlint(versions.ktlint)
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}
