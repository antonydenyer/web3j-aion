package org.web3j.aion.crypto

import assertk.assertThat
import assertk.assertions.containsExactly
import assertk.assertions.isEqualTo
import org.junit.Test
import org.web3j.aion.abi.nrg
import org.web3j.aion.abi.nrgPrice
import org.web3j.crypto.Credentials
import org.web3j.crypto.Sign
import org.web3j.crypto.TransactionEncoder
import org.web3j.rlp.RlpString
import org.web3j.utils.Bytes
import org.web3j.utils.Numeric
import java.math.BigInteger
import java.time.Clock
import java.time.Instant
import java.time.ZoneOffset

class AionTransactionEncoderTest {

    private val clock = Clock.fixed(Instant.now(), ZoneOffset.UTC)
    private val adapter = AionTransactionEncoder(clock)

    private val transaction = AionTransaction(
        BigInteger.valueOf(10000000000),
        BigInteger.valueOf(4000000),
        BigInteger.valueOf(21000),
        "0xa0c57475b6a30901b2348c1071d7b27a471f43f8bf895d04b73db08e659efe99",
        BigInteger.TEN,
        "0x605060405234156100105760006000fd5b604051610469380380610469833981016040528080518201919060100150505b5" +
            "b3360006000508282909180600101839055555050505b8060026000509080519060100190610060929190610068565b505b506" +
            "1011a565b8280546001816001161561010002031660029004906000526010600020905090600f016010900481019282600f106" +
            "100ab57805160ff19168380011785556100de565b828001600101855582156100de579182015b828111156100dd57825182600" +
            "050909055916010019190600101906100bd565b5b5090506100eb91906100ef565b5090565b61011791906100f9565b8082111" +
            "561011357600081815060009055506001016100f9565b5090565b90565b610340806101296000396000f300605060405260003" +
            "56c01000000000000000000000000900463ffffffff16806341c0e1b5146100495780634ac0d66e1461005f578063cfae32171" +
            "46100c157610043565b60006000fd5b34156100555760006000fd5b61005d610151565b005b341561006b5760006000fd5b610" +
            "0bf6004808035906010019082018035906010019191908080600f0160108091040260100160405190810160405280939291908" +
            "1815260100183838082843782019150505050505090909190505061017b565b005b34156100cd5760006000fd5b6100d561019" +
            "9565b6040518080601001828103825283818151815260100191508051906010019080838360005b83811015610116578082015" +
            "1818401525b6010810190506100fa565b50505050905090810190600f1680156101435780820380516001836010036101000a0" +
            "31916815260100191505b509250505060405180910390f35b60006000508060010154905433909114919014161561017857600" +
            "060005080600101549054ff5b5b565b806002600050908051906010019061019492919061024b565b505b50565b6101a16102d" +
            "2565b60026000508054600181600116156101000203166002900480600f0160108091040260100160405190810160405280929" +
            "1908181526010018280546001816001161561010002031660029004801561023c5780600f1061020f576101008083540402835" +
            "2916010019161023c565b8201919060005260106000209050905b81548152906001019060100180831161021f57829003600f1" +
            "68201915b50505050509050610248565b90565b828054600181600116156101000203166002900490600052601060002090509" +
            "0600f016010900481019282600f1061028e57805160ff19168380011785556102c1565b828001600101855582156102c157918" +
            "2015b828111156102c057825182600050909055916010019190600101906102a0565b5b5090506102ce91906102e9565b50905" +
            "65b601060405190810160405280600081526010015090565b61031191906102f3565b8082111561030d5760008181506000905" +
            "5506001016102f3565b5090565b905600a165627a7a72305820123c90d8d490b8d315d013e25883bfa13527def3322565fdb8c" +
            "0b6fd4fae93710029000000000000000000000000000000100000000000000000000000000000000941696f6e2074657374000" +
            "0000000000000000000000000000000000000000000",
        AionTransactionType.FVM
    )

    @Test
    fun `deploy greeter contract as RLP values`() {

        val byteArray = ByteArray(1)
        byteArray[0] = 127

        val signatureData = Sign.SignatureData(byteArray, byteArray, byteArray)
        val rlpValues = adapter.asRlpValues(transaction, signatureData)

        assertThat(rlpValues).containsExactly(
            RlpString.create(transaction.nonce),
            RlpString.create(Numeric.hexStringToByteArray(transaction.to)),
            RlpString.create(transaction.value),
            RlpString.create(Numeric.hexStringToByteArray(transaction.data)),
            RlpString.create(BigInteger.valueOf(clock.millis() * 1000).toByteArray()),
            RlpString.create(transaction.nrg),
            RlpString.create(transaction.nrgPrice),
            RlpString.create(transaction.type.data),
            RlpString.create(Bytes.trimLeadingZeroes(signatureData.v)),
            RlpString.create(Bytes.trimLeadingZeroes(signatureData.r)),
            RlpString.create(Bytes.trimLeadingZeroes(signatureData.s))
        )
    }

    @Test
    fun `encode raw transaction`() {
        assertThat(Numeric.toHexString(TransactionEncoder.encode(transaction, 0L))).isEqualTo(
            "0xf90527068080b904a9605060405234156100105760006000fd5b60405161046938038061046983398101604" +
                "0528080518201919060100150505b5b3360006000508282909180600101839055555050505b806002600050908051906010019" +
                "0610060929190610068565b505b5061011a565b828054600181600116156101000203166002900490600052601060002090509" +
                "0600f016010900481019282600f106100ab57805160ff19168380011785556100de565b828001600101855582156100de57918" +
                "2015b828111156100dd57825182600050909055916010019190600101906100bd565b5b5090506100eb91906100ef565b50905" +
                "65b61011791906100f9565b8082111561011357600081815060009055506001016100f9565b5090565b90565b6103408061012" +
                "96000396000f30060506040526000356c01000000000000000000000000900463ffffffff16806341c0e1b5146100495780634" +
                "ac0d66e1461005f578063cfae3217146100c157610043565b60006000fd5b34156100555760006000fd5b61005d610151565b0" +
                "05b341561006b5760006000fd5b6100bf6004808035906010019082018035906010019191908080600f0160108091040260100" +
                "1604051908101604052809392919081815260100183838082843782019150505050505090909190505061017b565b005b34156" +
                "100cd5760006000fd5b6100d5610199565b6040518080601001828103825283818151815260100191508051906010019080838" +
                "360005b838110156101165780820151818401525b6010810190506100fa565b50505050905090810190600f168015610143578" +
                "0820380516001836010036101000a031916815260100191505b509250505060405180910390f35b60006000508060010154905" +
                "433909114919014161561017857600060005080600101549054ff5b5b565b80600260005090805190601001906101949291906" +
                "1024b565b505b50565b6101a16102d2565b60026000508054600181600116156101000203166002900480600f0160108091040" +
                "2601001604051908101604052809291908181526010018280546001816001161561010002031660029004801561023c5780600" +
                "f1061020f5761010080835404028352916010019161023c565b8201919060005260106000209050905b8154815290600101906" +
                "0100180831161021f57829003600f168201915b50505050509050610248565b90565b828054600181600116156101000203166" +
                "0029004906000526010600020905090600f016010900481019282600f1061028e57805160ff19168380011785556102c1565b8" +
                "28001600101855582156102c1579182015b828111156102c057825182600050909055916010019190600101906102a0565b5b5" +
                "090506102ce91906102e9565b5090565b601060405190810160405280600081526010015090565b61031191906102f3565b808" +
                "2111561030d57600081815060009055506001016102f3565b5090565b905600a165627a7a72305820123c90d8d490b8d315d01" +
                "3e25883bfa13527def3322565fdb8c0b6fd4fae937100290000000000000000000000000000001000000000000000000000000" +
                "00000000941696f6e2074657374000000000000000000000000000000000000000000000087058acd67415568833d090088000" +
                "00002540be40001b86008fe2bf5757b8261d4937f13b5815448f2144f9c1409a3fab4c99ca86fff8a36511a6fabb3be2d2b54f" +
                "dcef9a128d66116d17b491366ef3a7e211bceb024489a4b7e070e255fc54f66789555618fbf2eaf5f8bc35a05645466e8c5441" +
                "8467109"
        )
    }

    @Test
    fun `sign raw transaction`() {
        val privateKey = Numeric.hexStringToByteArray(
            "183759fc5cfd01a893ce417c2dde2f3f94026f96276043ddc98ab95a62d" +
                "c3583a13df70b0ccc362e94c02e7bcd514523add9edcbb20412f00544a462f00d63e4"
        )

        val keyPair = Ed25519KeyPair.create(BigInteger(privateKey))
        val credentials = Credentials.create(keyPair)

        assertThat(Numeric.toHexString(TransactionEncoder.signMessage(transaction, credentials))).isEqualTo(
            "0xf90527068080b904a9605060405234156100105760006000fd5b60405161046938038061046983398101604" +
                "0528080518201919060100150505b5b3360006000508282909180600101839055555050505b806002600050908051906010019" +
                "0610060929190610068565b505b5061011a565b828054600181600116156101000203166002900490600052601060002090509" +
                "0600f016010900481019282600f106100ab57805160ff19168380011785556100de565b828001600101855582156100de57918" +
                "2015b828111156100dd57825182600050909055916010019190600101906100bd565b5b5090506100eb91906100ef565b50905" +
                "65b61011791906100f9565b8082111561011357600081815060009055506001016100f9565b5090565b90565b6103408061012" +
                "96000396000f30060506040526000356c01000000000000000000000000900463ffffffff16806341c0e1b5146100495780634" +
                "ac0d66e1461005f578063cfae3217146100c157610043565b60006000fd5b34156100555760006000fd5b61005d610151565b0" +
                "05b341561006b5760006000fd5b6100bf6004808035906010019082018035906010019191908080600f0160108091040260100" +
                "1604051908101604052809392919081815260100183838082843782019150505050505090909190505061017b565b005b34156" +
                "100cd5760006000fd5b6100d5610199565b6040518080601001828103825283818151815260100191508051906010019080838" +
                "360005b838110156101165780820151818401525b6010810190506100fa565b50505050905090810190600f168015610143578" +
                "0820380516001836010036101000a031916815260100191505b509250505060405180910390f35b60006000508060010154905" +
                "433909114919014161561017857600060005080600101549054ff5b5b565b80600260005090805190601001906101949291906" +
                "1024b565b505b50565b6101a16102d2565b60026000508054600181600116156101000203166002900480600f0160108091040" +
                "2601001604051908101604052809291908181526010018280546001816001161561010002031660029004801561023c5780600" +
                "f1061020f5761010080835404028352916010019161023c565b8201919060005260106000209050905b8154815290600101906" +
                "0100180831161021f57829003600f168201915b50505050509050610248565b90565b828054600181600116156101000203166" +
                "0029004906000526010600020905090600f016010900481019282600f1061028e57805160ff19168380011785556102c1565b8" +
                "28001600101855582156102c1579182015b828111156102c057825182600050909055916010019190600101906102a0565b5b5" +
                "090506102ce91906102e9565b5090565b601060405190810160405280600081526010015090565b61031191906102f3565b808" +
                "2111561030d57600081815060009055506001016102f3565b5090565b905600a165627a7a72305820123c90d8d490b8d315d01" +
                "3e25883bfa13527def3322565fdb8c0b6fd4fae937100290000000000000000000000000000001000000000000000000000000" +
                "00000000941696f6e2074657374000000000000000000000000000000000000000000000087058acd67415568833d090088000" +
                "00002540be40001b86008fe2bf5757b8261d4937f13b5815448f2144f9c1409a3fab4c99ca86fff8a36511a6fabb3be2d2b54f" +
                "dcef9a128d66116d17b491366ef3a7e211bceb024489a4b7e070e255fc54f66789555618fbf2eaf5f8bc35a05645466e8c5441" +
                "8467109"
        )
    }
}